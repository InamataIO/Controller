#include "network_client_impl.h"

NetworkClient::NetworkClient() : _impl(new NetworkClient::Impl()) {
  TRACELN("NC()");
}
NetworkClient::NetworkClient(WiFiClient wifi_client)
    : _impl(new NetworkClient::Impl()) {
  TRACELN("NC(WC)");
}
NetworkClient::~NetworkClient() { TRACELN("~NC()"); }

int NetworkClient::connect(IPAddress ip, uint16_t port) {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->connect(ip, port);
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->connect(ip, port);
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

int NetworkClient::connect(const char *host, uint16_t port) {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->connect(host, port);
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->connect(host, port);
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

int NetworkClient::connect(const char *host, uint16_t port,
                           int32_t timeout_ms) {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->connect(host, port, timeout_ms / 1000);
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->connect(host, port, timeout_ms);
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

size_t NetworkClient::write(uint8_t data) {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->write(data);
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->write(data);
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

size_t NetworkClient::write(const uint8_t *buf, size_t size) {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->write(buf, size);
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->write(buf, size);
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

size_t NetworkClient::write(const char *str) {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->write((const uint8_t *)str, strlen(str));
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->write((const uint8_t *)str, strlen(str));
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

int NetworkClient::available() {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->available();
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->available();
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

int NetworkClient::read() {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->read();
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->read();
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

int NetworkClient::read(uint8_t *buf, size_t size) {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->read(buf, size);
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->read(buf, size);
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

int NetworkClient::peek() {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->peek();
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->peek();
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

void NetworkClient::flush() {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->flush();
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->flush();
  }
  TRACELN(_impl->no_interface_error_);
}

void NetworkClient::stop() {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->stop();
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->stop();
  }
  TRACELN(_impl->no_interface_error_);
}

uint8_t NetworkClient::connected() {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->connected();
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->connected();
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

NetworkClient::operator bool() {
  if (_impl->gsm_client_secure_) {
    return _impl->gsm_client_secure_->operator bool();
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->operator bool();
  }
  TRACELN(_impl->no_interface_error_);
  return 0;
}

void NetworkClient::setCACert(const char *rootCA) {
  if (_impl->gsm_client_secure_) {
    _impl->gsm_client_secure_->setCertificate(rootCA);
    return;
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->setCACert(rootCA);
  }
  TRACELN(_impl->no_interface_error_);
}

void NetworkClient::setCACertBundle(const uint8_t *bundle) {
  if (_impl->gsm_client_secure_) {
    _impl->gsm_client_secure_->setCACertBundle(bundle);
    return;
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->setCACertBundle(bundle);
  }
  TRACELN(_impl->no_interface_error_);
}

void NetworkClient::setInsecure() {
  if (_impl->gsm_client_secure_) {
    _impl->gsm_client_secure_->setInsecure();
    return;
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->setInsecure();
  }
  TRACELN(_impl->no_interface_error_);
}

bool NetworkClient::verify(const char *fingerprint, const char *domain_name) {
  if (_impl->gsm_client_secure_) {
    _impl->gsm_client_secure_->verify(fingerprint, domain_name);
    return true;
  } else if (_impl->wifi_client_secure_) {
    return _impl->wifi_client_secure_->verify(fingerprint, domain_name);
  }
  TRACELN(_impl->no_interface_error_);
  return false;
}

std::unique_ptr<WiFiClientSecure> NetworkClient::Impl::wifi_client_secure_ =
    nullptr;
std::unique_ptr<SSLClient> NetworkClient::Impl::gsm_client_secure_ = nullptr;
const __FlashStringHelper *NetworkClient::Impl::no_interface_error_ =
    F("No interface");